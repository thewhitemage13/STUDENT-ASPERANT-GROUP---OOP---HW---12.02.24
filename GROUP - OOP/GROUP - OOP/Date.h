#pragma once
#include "Fraction.h"
#include <string>
class Date {
public:
    unsigned short day;
    unsigned short month;
    long long year;
    unsigned short one_day = 1;

public:

    Date();
    Date(unsigned short day, unsigned short month, long long year);
    Date(unsigned short day, unsigned short month) : Date(day, month, 2005) {};
    void PrintDate() const;
    void SetDay(unsigned short day);
    unsigned short GetDay() const;
    void SetMonth(unsigned short month);
    unsigned short GetMonth() const;
    void SetYear(long long year);
    long long GetYear() const;
    // пример перегрузки оператора ++ ПРЕФИКСНОЙ ФОРМЫ
    // ИДЕЯ: изменить оригинал, вернуть оригинал
    Date& operator ++ ()
    {
        // увеличиваем числитель на значение знаменателя
        // если было 3/4, то станет 7/4
        // 1) алгоритм по изменению текущего состояния объекта
        this->day += this->one_day;
        // 2) возврат ссылки на текущий объект, с новым состоянием
        return *this;
    }
    // пример перегрузки оператора ++ ПОСТФИКСНОЙ ФОРМЫ
    // ИДЕЯ: изменить оригинал, но вернуть КОПИЮ
    Date operator ++ (int x)
    { // здесь параметр используется исключительно ради того, чтобы была возможность отличить одну сигнатуру функции от другой, в этот параметр ничего не приходит. данный параметр называется заглушкой, либо фиктивным параметром
        // 1) создать копию объекта
        Date copy = *this;
        // 2) изменить оригинал
        this->day += this->one_day;
        // 3) вернуть копию 
        return copy;
    }
    // пример перегрузки оператора ++ ПРЕФИКСНОЙ ФОРМЫ
    // ИДЕЯ: изменить оригинал, вернуть оригинал
    Date& operator -- ()
    {
        // увеличиваем числитель на значение знаменателя
        // если было 3/4, то станет 7/4
        // 1) алгоритм по изменению текущего состояния объекта
        this->day -= this->one_day;
        // 2) возврат ссылки на текущий объект, с новым состоянием
        return *this;
    }
    // пример перегрузки оператора ++ ПОСТФИКСНОЙ ФОРМЫ
    // ИДЕЯ: изменить оригинал, но вернуть КОПИЮ
    Date operator -- (int x)
    { // здесь параметр используется исключительно ради того, чтобы была возможность отличить одну сигнатуру функции от другой, в этот параметр ничего не приходит. данный параметр называется заглушкой, либо фиктивным параметром
        // 1) создать копию объекта
        Date copy = *this;
        // 2) изменить оригинал
        this->day -= this->one_day;
        // 3) вернуть копию 
        return copy;
    }
    Date operator += (int x)
    { // здесь параметр используется исключительно ради того, чтобы была возможность отличить одну сигнатуру функции от другой, в этот параметр ничего не приходит. данный параметр называется заглушкой, либо фиктивным параметром
        // 1) создать копию объекта
        Date copy = *this;
        // 2) изменить оригинал
        this->day += x;
        // 3) вернуть копию 
        return copy;
    }
};